#!/usr/bin/python

from kubernetes import client,config
import os
import json
import time
import subprocess
import tensorflow as tf

namespace = os.environ["NAMESPACE"]
localIp = os.environ["POD_IP"]
logdir = os.environ["LOG_DIR"]

tf.app.flags.DEFINE_string("job_name", "default", "Name of the job")
tf.app.flags.DEFINE_integer("ps_num", 1, "Number of the ps")
tf.app.flags.DEFINE_integer("worker_num", 2, "Number of the worker")
tf.app.flags.DEFINE_string("role", "ps", "Role of the job")
tf.app.flags.DEFINE_string("cmd", "python mnist.py --model_dir=/tmp/trained_model --log_dir=/tmp/training_log ", "Cmd to start the job")

FLAGS = tf.app.flags.FLAGS

config.load_incluster_config()
v1 = client.CoreV1Api()

def getPSStr():
  psStr = ""

  taskIndex = -1

  ps_pods = v1.list_namespaced_pod(namespace, label_selector="role=ps,job=" + FLAGS.job_name)
  items = ps_pods.items
  if (len(items) != FLAGS.ps_num):
    return False, "", taskIndex
  for i in range(0, len(items)):
    try:
      podIp = items[i].status.pod_ip
      if (podIp == localIp):
        taskIndex = i
      psStr = psStr + podIp + ":2222,"
    except Exception as err:
      return False, "", taskIndex
  return True, psStr[:-1], taskIndex

def getWorkerStr():
  workerStr = ""

  taskIndex = -1

  worker_pods = v1.list_namespaced_pod(namespace, label_selector="role=worker,job=" + FLAGS.job_name)
  items = worker_pods.items
  if (len(items) != FLAGS.worker_num):
    return False, "", taskIndex
  for i in range(0, len(items)):
    try:
      podIp = items[i].status.pod_ip
      if (podIp == localIp):
        taskIndex = i
      workerStr = workerStr + podIp + ":2222,"
    except Exception as err:
      print(err)
      return False, "", taskIndex
  return True, workerStr[:-1], taskIndex

def execCommand(psStr, workerStr, taskIndex):
  cmd = "%s --ps_hosts=%s --worker_hosts=%s --task_index=%d --job_name=%s"%(FLAGS.cmd, psStr, workerStr, taskIndex, FLAGS.role)
  print("the cmd to start the job: " + cmd)

  path = "%s/%s/%d"%(logdir, FLAGS.role, taskIndex)
  if (os.path.exists(path) != True): 
    os.makedirs(path)
  f = file(path + "/log","w+")
  
  try:
    subp = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    while subp.poll()==None:
      log = subp.stdout.readline()
      print(log)
      f.write(log)
  finally:
    f.close()

if __name__=="__main__":

  isParamReady = False
  taskIndex = 0
  psStr = ""
  workerStr = ""
  
  for i in range(0, 100):

    time.sleep(3)

    isPSReady, psStr, psIndex = getPSStr()
    if (isPSReady == False):
      print("failed to prepare PS, try it later.")
      continue
    if (psIndex != -1):
      taskIndex = psIndex

    isWorkerReady, workerStr, workerIndex = getWorkerStr()
    if (isWorkerReady == False):
      print("failed to prepare Worker, try it later.")
      continue
    if (workerIndex != -1):
      taskIndex = workerIndex

    isParamReady = True

    break

  if (isParamReady == True):
    execCommand(psStr, workerStr, taskIndex)
  else:
    print("failed to prepare parametes to run tf job.")

